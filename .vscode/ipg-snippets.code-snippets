{
	// Place your ipg workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"console.log an object": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "logo",
		"body": [
			"console.log({ $1 })$0",
		],
		"description": "console.log an object"
	},
	"destructure object": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "dest",
		"body": [
			"const { $2 } = $1;$0",
		],
		"description": "React useDispatch hook"
	},
	"useDispatch": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "usd",
		"body": [
			"const dispatch = useDispatch$0();",
		],
		"description": "React useDispatch hook"
	},
	"useHistory": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "ush",
		"body": [
			"const history = useHistory$0();",
		],
		"description": "React useHistory hook"
	},
	"useLocation": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "usl",
		"body": [
			"const location = useLocation$0();",
		],
		"description": "React useLocation hook"
	},
	"useParams": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "usp",
		"body": [
			"const { $3 } = useParams$2<${1:Params}>();$0",
		],
		"description": "React useParams hook"
	},
	"useTypedSelector": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "ust",
		"body": [
			"const { $3 } = useTypedSelector$1(state => state$2);$0",
		],
		"description": "Custom useTypedSelector hook"
	},
	"importStylesScssModule": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "iscss",
		"body": [
			"import styles from './styles.module.scss';$0",
		],
		"description": "syntax for importing scss modules"
	}
}